// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Web_API_Proyecto_final.Database;

#nullable disable

namespace Web_API_Proyecto_final.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Web_API_Proyecto_final.models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("BuyPrice")
                        .HasColumnType("float");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<double>("SellPrice")
                        .HasColumnType("float");

                    b.Property<decimal>("Stock")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("TotalProduct")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UsersId" }, "IX_Products_UsersId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Web_API_Proyecto_final.models.ProductSold", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SaleId")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ProductId" }, "IX_ProductSold_ProductId");

                    b.HasIndex(new[] { "SaleId" }, "IX_ProductSold_SaleId");

                    b.ToTable("ProductSold");
                });

            modelBuilder.Entity("Web_API_Proyecto_final.models.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("SalesId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex(new[] { "SalesId" }, "IX_Sales_SalesId");

                    b.HasIndex(new[] { "UsersId" }, "IX_Sales_UsersId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("Web_API_Proyecto_final.models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Web_API_Proyecto_final.models.Product", b =>
                {
                    b.HasOne("Web_API_Proyecto_final.models.User", "IdUserNavigation")
                        .WithMany("Products")
                        .HasForeignKey("UsersId");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("Web_API_Proyecto_final.models.ProductSold", b =>
                {
                    b.HasOne("Web_API_Proyecto_final.models.Product", "IdProductNavigation")
                        .WithMany("ProductSold")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web_API_Proyecto_final.models.Sale", "IdSaleNavigation")
                        .WithMany("ProductSold")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdProductNavigation");

                    b.Navigation("IdSaleNavigation");
                });

            modelBuilder.Entity("Web_API_Proyecto_final.models.Sale", b =>
                {
                    b.HasOne("Web_API_Proyecto_final.models.Product", null)
                        .WithMany("Sale")
                        .HasForeignKey("ProductId");

                    b.HasOne("Web_API_Proyecto_final.models.Sale", "Sales")
                        .WithMany("InverseSales")
                        .HasForeignKey("SalesId");

                    b.HasOne("Web_API_Proyecto_final.models.User", "Users")
                        .WithMany("Sales")
                        .HasForeignKey("UsersId");

                    b.Navigation("Sales");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Web_API_Proyecto_final.models.Product", b =>
                {
                    b.Navigation("ProductSold");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("Web_API_Proyecto_final.models.Sale", b =>
                {
                    b.Navigation("InverseSales");

                    b.Navigation("ProductSold");
                });

            modelBuilder.Entity("Web_API_Proyecto_final.models.User", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Sales");
                });
#pragma warning restore 612, 618
        }
    }
}
